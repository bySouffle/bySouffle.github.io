<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>QT基础</title>
      <link href="/2020/11/15/qt-1-ji-chu/"/>
      <url>/2020/11/15/qt-1-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="QT基础"><a href="#QT基础" class="headerlink" title="QT基础"></a>QT基础</h1><h2 id="QWidget"><a href="#QWidget" class="headerlink" title="QWidget"></a>QWidget</h2><ul><li>空的父系窗口，可以包含QPushbutton、QLineEdit、Layout等部件</li></ul><hr><pre><code>QWidget w;w.setWindowTitle("zzz");//  显示窗口w.show();</code></pre><hr><h2 id="QPushButton"><a href="#QPushButton" class="headerlink" title="QPushButton"></a>QPushButton</h2><ul><li>按钮也是一个窗口 继承QWidget</li></ul><hr><pre><code>QPushButton button;button.setText("quit");</code></pre><hr><ol><li>窗口之间存在父子关系,没有父子对象的窗口为主窗口</li></ol><hr><pre><code>button.setParent(&amp;w);</code></pre><hr><ol start="2"><li>setGeometry(x, y, l, w) 设置几何位置</li></ol><hr><pre><code>button.setGeometry(20,20,100,30);</code></pre><hr><h2 id="QLineEdit"><a href="#QLineEdit" class="headerlink" title="QLineEdit"></a>QLineEdit</h2><ul><li>文本输入框</li></ul><hr><pre><code>QLineEdit edit;edit.setParent(&amp;w);</code></pre><hr><ol><li>显示方式(输入密码那种样子)</li></ol><hr><pre><code>edit.setEchoMode(QLineEdit::Password);edit.text();</code></pre><hr><ol start="2"><li><p>输入匹配</p><p> (1) 创建一个预期的QStringList</p><p> (2) 创建一个QCompleter completer(QStringList()&lt;&lt;””);</p><p> (3) 匹配模式<br> completer.setFilterMode(Qt::MatchContains)</p><p> (4) 设置模式到QLineEdit</p></li></ol><hr><pre><code>QCompleter completer(QStringList()&lt;&lt;"123" &lt;&lt;"abc");completer.setFilterMode(Qt::MatchContains);edit.setCompleter(&amp;completer);</code></pre><hr><ol start="3"><li>默认显示</li></ol><hr><pre><code>edit.setPlaceholderText("gogogo");edit.setParent(&amp;w);</code></pre><hr><h2 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h2><ul><li><p>用<strong>QVBoxLayout</strong>、<strong>QHBoxLayout</strong>、<strong>QGridLayout</strong> 创建一个Layout</p></li><li><p>将按钮啥的放到 部件 里 layout.addWidget()</p></li><li><p>将Layout放到 QWidget 里 addWidget(&amp; layout)</p><ol><li>添加空位addSpacing</li><li>addStretch 弹簧一样将layout中的 部件 压到一块 参数为比例</li></ol></li></ul><hr><pre><code>QHBoxLayout h_layout;//  addWidget 第二个参数是部件的长度比例h_layout.addWidget(&amp;button,1);h_layout.addWidget(&amp;edit,2);h_layout.addStretch(2);w.setLayout(&amp;h_layout);</code></pre><hr><ul><li>QGridLayout 矩阵式多个部件</li></ul><hr><pre><code>QGridLayout g_layout;//  QGridLayout 矩阵式多个部件g_layout.addWidget(&amp;button,0,0);g_layout.addWidget(&amp;edit,0,1);g_layout.addWidget(new QPushButton("1, 0"),1,0);g_layout.addWidget(new QPushButton("1, 1"),1,1);g_layout.setColumnStretch(2,1);g_layout.setRowStretch(2,1);w.setLayout(&amp;g_layout);</code></pre><hr><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><hr><pre><code>//  登录界面/*  1. 居中 *  2. 用户名 label   edit *  3. 密码   label   edit *  4. 确认   button *      */QWidget *w = new QWidget;QLabel *m_l_username = new QLabel;QLabel *m_l_passwd = new QLabel;QLineEdit *m_e_username = new QLineEdit;QLineEdit *m_e_passwd = new QLineEdit;QPushButton *m_login_bt = new QPushButton;QGridLayout *m_login_glayout = new QGridLayout;QHBoxLayout *m_login_bt_l = new QHBoxLayout;m_l_username-&gt;setText("用户名:");m_login_glayout-&gt;addWidget(m_l_username,1,1);//  m_login_glayout-&gt;setSpacing(10);m_e_username-&gt;setMaxLength(8);m_login_glayout-&gt;addWidget(m_e_username,1,2);m_l_passwd-&gt;setText("密码:");m_login_glayout-&gt;addWidget(m_l_passwd,2,1);m_login_glayout-&gt;setSpacing(10);m_e_passwd-&gt;setEchoMode(QLineEdit::Password);m_login_glayout-&gt;addWidget(m_e_passwd,2,2);m_login_glayout-&gt;setRowStretch(0,1);m_login_glayout-&gt;setColumnStretch(0,1);m_login_glayout-&gt;setRowStretch(4,1);m_login_glayout-&gt;setColumnStretch(4,1);m_login_bt-&gt;setText("登录");m_login_bt_l-&gt;addStretch(1);m_login_bt_l-&gt;addWidget(m_login_bt);m_login_glayout-&gt;addLayout(m_login_bt_l,3,2);//    m_login_glayout-&gt;addWidget(m_login_bt,3,2);w-&gt;setLayout(m_login_glayout);//    w-&gt;setLayout()w-&gt;show();</code></pre><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT窗口部件</title>
      <link href="/2020/11/15/qt-1/"/>
      <url>/2020/11/15/qt-1/</url>
      
        <content type="html"><![CDATA[<h2 id="QT"><a href="#QT" class="headerlink" title="QT"></a>QT</h2><h3 id="一-各种部件"><a href="#一-各种部件" class="headerlink" title="一.  各种部件"></a>一.  各种部件</h3><ul><li><strong>QWidget</strong> 现理解的作用就是包起其他的部件，如QVboxLayout</li></ul><hr><pre><code>// 创建一个QWidegetQWidget w;  //  创建实例对象QWidget *w1 = new QWidget;  //  创建指针(推荐)</code></pre><hr><ul><li><strong>QVBoxLayout(QHboxLayout)</strong> 存放各种按钮框框啥的吧</li></ul><hr><pre><code>//  创建一个QVBoxLayoutQVBoxLayout box;  //  创建实例对象QVBoxLayout *box = new QVBoxLayout;  //  创建指针</code></pre><hr><ul><li><strong>QPushButton</strong> 按钮</li></ul><hr><pre><code>QPushButton quit("quit");//  1.将按钮放入 BoxLayoutbox-&gt;addWidget(&amp;hello);QObject::connect(        &amp;quit,                  // 按下buttom发出信号的对象        &amp;QPushButton::clicked,  // 点击信号          &amp;a,                     // 接受信号的对象        &amp;QApplication::quit     // 槽 实现功能 退出        );//  2.BoxLayout 放入 QWidgetw-&gt;setLayout(&amp;box);//  3.显示w-&gt;show();</code></pre><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组与指针</title>
      <link href="/2020/10/24/array-point/"/>
      <url>/2020/10/24/array-point/</url>
      
        <content type="html"><![CDATA[<h2 id="数据与指针"><a href="#数据与指针" class="headerlink" title="数据与指针"></a>数据与指针</h2><h3 id="一-概念"><a href="#一-概念" class="headerlink" title="一.  概念"></a>一.  概念</h3><ul><li>数组：储存多个相同类型元素</li><li>指针：自身储存指向对象的地址</li></ul><h3 id="二-赋值"><a href="#二-赋值" class="headerlink" title="二. 赋值"></a>二. 赋值</h3><blockquote><p>数组</p><ul><li>1</li></ul></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/10/24/hello-world/"/>
      <url>/2020/10/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2020/08/02/test/"/>
      <url>/2020/08/02/test/</url>
      
        <content type="html"><![CDATA[<hr><pre><code>print("hello world")</code></pre><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
